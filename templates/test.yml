parameters:
  buildConfiguration: 'Release'

# 1. Update this task.
steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet test ${{ parameters.buildConfiguration }}'
  inputs:
    command: 'test'
    arguments: '--configuration ${{ parameters.buildConfiguration }} /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    publishTestResults: true
    projects: '**/*.Tests.csproj'
    nobuild: true

# 2. Then layer in report generator.
# TODO: Add this to main.yml
- task: DotNetCoreCLI@2
  displayName: 'Install reportgenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install -g dotnet-reportgenerator-globaltool'

# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
- script: |
    reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
  displayName: Create Code coverage report

# # Publish the code coverage result (summary and web site)
# # The summary allows to view the coverage percentage in the summary tab
# # The web site allows to view which lines are covered directly in Azure Pipeline
# - task: PublishCodeCoverageResults@1
#   displayName: 'Publish code coverage'
#   inputs:
#     codeCoverageTool: Cobertura
#     summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
#     reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

- task: PublishCodeCoverageResults@1
  displayName: 'publish coverage results'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
    #summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'